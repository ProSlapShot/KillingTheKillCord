
RotaryEnc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d1  008002d8  008002d8  00000840  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b8a  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053c  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000584  00000000  00000000  00001a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00001fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000427  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000563  00000000  00000000  00002667  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00002bca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	12 e0       	ldi	r17, 0x02	; 2
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ed       	ldi	r30, 0xD4	; 212
  90:	f5 e0       	ldi	r31, 0x05	; 5
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 3d       	cpi	r26, 0xD8	; 216
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	25 e0       	ldi	r18, 0x05	; 5
  a0:	a8 ed       	ldi	r26, 0xD8	; 216
  a2:	b2 e0       	ldi	r27, 0x02	; 2
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a9 3a       	cpi	r26, 0xA9	; 169
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  b2:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_5>:
	
	tmp = (SPT_PIN & spt_pins);		// Initial button status
}

ISR(PCINT1_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
	waiting |= (SPT_PIN & spt_pins) ^ tmp;		//Need to mask pins
  ca:	93 b1       	in	r25, 0x03	; 3
  cc:	80 91 01 01 	lds	r24, 0x0101
  d0:	98 23       	and	r25, r24
  d2:	20 91 00 01 	lds	r18, 0x0100
  d6:	92 27       	eor	r25, r18
  d8:	20 91 d8 02 	lds	r18, 0x02D8
  dc:	92 2b       	or	r25, r18
  de:	90 93 d8 02 	sts	0x02D8, r25
	tmp = (SPT_PIN & spt_pins);
  e2:	93 b1       	in	r25, 0x03	; 3
  e4:	89 23       	and	r24, r25
  e6:	80 93 00 01 	sts	0x0100, r24
}
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <main>:



int main(void)
{
	uart_init();
  fa:	0e 94 c5 02 	call	0x58a	; 0x58a <uart_init>
	timer_init();
  fe:	0e 94 98 02 	call	0x530	; 0x530 <timer_init>
	rot_init();
 102:	0e 94 85 00 	call	0x10a	; 0x10a <rot_init>
	//softpot_init();
	sei();
 106:	78 94       	sei
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0xe>

0000010a <rot_init>:
uint8_t two_bpos = 0;


void rot_init()
{
		RTR_DDR |= ~pins; //Set Port A as inputs
 10a:	91 b1       	in	r25, 0x01	; 1
 10c:	80 91 02 01 	lds	r24, 0x0102
 110:	80 95       	com	r24
 112:	89 2b       	or	r24, r25
 114:	81 b9       	out	0x01, r24	; 1
		RTR_PORT |= pins; // Enable pull up resistors
 116:	92 b1       	in	r25, 0x02	; 2
 118:	80 91 02 01 	lds	r24, 0x0102
 11c:	89 2b       	or	r24, r25
 11e:	82 b9       	out	0x02, r24	; 2
		
		//PCICR = _BV(PCIE0); //Enable interrupts on Port B
		//PCMSK0 |= pins; //Set pins on Port B as interrupts	
		
		DDRD |= _BV(PIND3);			//Rotary Select Pin	
 120:	53 9a       	sbi	0x0a, 3	; 10
		PORTD |= _BV(PIND3);
 122:	5b 9a       	sbi	0x0b, 3	; 11
 124:	e9 ea       	ldi	r30, 0xA9	; 169
 126:	f4 e0       	ldi	r31, 0x04	; 4
 128:	89 ea       	ldi	r24, 0xA9	; 169
 12a:	95 e0       	ldi	r25, 0x05	; 5
		//PORTD &= ~_BV(PIND3);
		//tmp_one = (RTR_PIN & pins);		
		
		int fill = 0;
		for(fill = 0; fill <= 255; fill++)	// Set all invalid en
			rtrlut_fast[fill] = 255;
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	21 93       	st	Z+, r18
		
		//PORTD &= ~_BV(PIND3);
		//tmp_one = (RTR_PIN & pins);		
		
		int fill = 0;
		for(fill = 0; fill <= 255; fill++)	// Set all invalid en
 130:	e8 17       	cp	r30, r24
 132:	f9 07       	cpc	r31, r25
 134:	e1 f7       	brne	.-8      	; 0x12e <rot_init+0x24>
 136:	e8 e5       	ldi	r30, 0x58	; 88
 138:	f2 e0       	ldi	r31, 0x02	; 2
 13a:	80 e0       	ldi	r24, 0x00	; 0
			rtrlut_fast[fill] = 255;
		for(fill = 0; fill <= 127; fill++)
			rtrlut_fast[rtrlut[fill]] = fill; 
 13c:	a1 91       	ld	r26, Z+
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	a7 55       	subi	r26, 0x57	; 87
 142:	bb 4f       	sbci	r27, 0xFB	; 251
 144:	8c 93       	st	X, r24
 146:	8f 5f       	subi	r24, 0xFF	; 255
		//tmp_one = (RTR_PIN & pins);		
		
		int fill = 0;
		for(fill = 0; fill <= 255; fill++)	// Set all invalid en
			rtrlut_fast[fill] = 255;
		for(fill = 0; fill <= 127; fill++)
 148:	80 38       	cpi	r24, 0x80	; 128
 14a:	c1 f7       	brne	.-16     	; 0x13c <rot_init+0x32>
			rtrlut_fast[rtrlut[fill]] = fill; 
		
			
}
 14c:	08 95       	ret

0000014e <rtr_value>:
}


uint8_t rtr_value()
{
	return RTR_PIN & pins;
 14e:	90 b1       	in	r25, 0x00	; 0
 150:	80 91 02 01 	lds	r24, 0x0102
}
 154:	89 23       	and	r24, r25
 156:	08 95       	ret

00000158 <rtr_qpos>:
//}

uint8_t rtr_qpos(uint8_t x)
{
	static uint8_t danger = 0;
	if(!x){								
 158:	81 11       	cpse	r24, r1
 15a:	36 c0       	rjmp	.+108    	; 0x1c8 <rtr_qpos+0x70>
		PORTD |= _BV(PIND3);
 15c:	5b 9a       	sbi	0x0b, 3	; 11
		
		if (rtrlut_fast[rtr_value()] == 255){	//Retrieves encoder one position (0-128)
 15e:	0e 94 a7 00 	call	0x14e	; 0x14e <rtr_value>
 162:	e8 2f       	mov	r30, r24
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e7 55       	subi	r30, 0x57	; 87
 168:	fb 4f       	sbci	r31, 0xFB	; 251
 16a:	80 81       	ld	r24, Z
 16c:	8f 3f       	cpi	r24, 0xFF	; 255
 16e:	39 f4       	brne	.+14     	; 0x17e <rtr_qpos+0x26>
			uart_str("ENCODER ERROR! \n");		//SEND ERROR incorrect reading
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
			return rtr_pos_one;
 178:	80 91 a8 04 	lds	r24, 0x04A8
 17c:	08 95       	ret
		}
		rtr_pos_one = rtrlut_fast[rtr_value()];
 17e:	0e 94 a7 00 	call	0x14e	; 0x14e <rtr_value>
 182:	e8 2f       	mov	r30, r24
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	e7 55       	subi	r30, 0x57	; 87
 188:	fb 4f       	sbci	r31, 0xFB	; 251
 18a:	80 81       	ld	r24, Z
 18c:	80 93 a8 04 	sts	0x04A8, r24
		
		if ((rtr_pos_one > 32) && (rtr_pos_one < 96)){
 190:	81 52       	subi	r24, 0x21	; 33
 192:	8f 33       	cpi	r24, 0x3F	; 63
 194:	60 f4       	brcc	.+24     	; 0x1ae <rtr_qpos+0x56>
			if(!danger)
 196:	80 91 e1 02 	lds	r24, 0x02E1
 19a:	81 11       	cpse	r24, r1
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <rtr_qpos+0x4e>
				uart_str("DANGER ZONE");
 19e:	89 e1       	ldi	r24, 0x19	; 25
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
			danger = 1;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 e1 02 	sts	0x02E1, r24
 1ac:	0a c0       	rjmp	.+20     	; 0x1c2 <rtr_qpos+0x6a>
		}
		else if(!((rtr_pos_one > 32) && (rtr_pos_one < 96)) && (danger == 1)){
 1ae:	80 91 e1 02 	lds	r24, 0x02E1
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	31 f4       	brne	.+12     	; 0x1c2 <rtr_qpos+0x6a>
			uart_str("EXIT DANGER ZONE");
 1b6:	84 e1       	ldi	r24, 0x14	; 20
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
			danger = 0;
 1be:	10 92 e1 02 	sts	0x02E1, r1
		}
			
		return rtr_pos_one;
 1c2:	80 91 a8 04 	lds	r24, 0x04A8
 1c6:	08 95       	ret
	}
	else if(x){							
		PORTD &= ~_BV(PIND3);
 1c8:	5b 98       	cbi	0x0b, 3	; 11
		
		if (rtrlut_fast[rtr_value()] == 255){	//Retrieves encoder two position (0-128)
 1ca:	0e 94 a7 00 	call	0x14e	; 0x14e <rtr_value>
 1ce:	e8 2f       	mov	r30, r24
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	e7 55       	subi	r30, 0x57	; 87
 1d4:	fb 4f       	sbci	r31, 0xFB	; 251
 1d6:	80 81       	ld	r24, Z
 1d8:	8f 3f       	cpi	r24, 0xFF	; 255
 1da:	39 f4       	brne	.+14     	; 0x1ea <rtr_qpos+0x92>
			uart_str("ENCODER ERROR! \n");		//SEND ERROR incorrect reading
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
			return rtr_pos_two;
 1e4:	80 91 a7 04 	lds	r24, 0x04A7
 1e8:	08 95       	ret
		}
		rtr_pos_two = rtrlut_fast[rtr_value()];
 1ea:	0e 94 a7 00 	call	0x14e	; 0x14e <rtr_value>
 1ee:	e8 2f       	mov	r30, r24
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	e7 55       	subi	r30, 0x57	; 87
 1f4:	fb 4f       	sbci	r31, 0xFB	; 251
 1f6:	80 81       	ld	r24, Z
 1f8:	80 93 a7 04 	sts	0x04A7, r24
		
		return rtr_pos_two;
	}
	else
	return RTR_INVALID;
}
 1fc:	08 95       	ret

000001fe <rtr_speed>:
	//else
	//return RTR_INVALID;
//}

void rtr_speed()
{
 1fe:	df 92       	push	r13
 200:	ef 92       	push	r14
 202:	ff 92       	push	r15
 204:	0f 93       	push	r16
 206:	1f 93       	push	r17
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	c0 e0       	ldi	r28, 0x00	; 0
 20e:	d0 e0       	ldi	r29, 0x00	; 0
	int speed_acc_one = 0;		//Accumulate RE changes
	int speed_acc_two = 0;
 210:	00 e0       	ldi	r16, 0x00	; 0
 212:	10 e0       	ldi	r17, 0x00	; 0
	//return RTR_INVALID;
//}

void rtr_speed()
{
	int speed_acc_one = 0;		//Accumulate RE changes
 214:	e1 2c       	mov	r14, r1
 216:	f1 2c       	mov	r15, r1
	for(acc = 0; acc <= 25; acc++){
		if(one_bpos-acc <= -1)
			index = 74 - (acc-one_bpos); //Deal with wrap around
		else
			index = one_bpos-acc;
		if(two_bpos-acc <= -1)
 218:	80 91 e2 02 	lds	r24, 0x02E2
 21c:	28 2f       	mov	r18, r24
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	2c 1b       	sub	r18, r28
 222:	3d 0b       	sbc	r19, r29
 224:	22 f4       	brpl	.+8      	; 0x22e <rtr_speed+0x30>
			index = 74 - (acc-two_bpos);
 226:	86 5b       	subi	r24, 0xB6	; 182
 228:	d8 2e       	mov	r13, r24
 22a:	dc 1a       	sub	r13, r28
 22c:	02 c0       	rjmp	.+4      	; 0x232 <rtr_speed+0x34>
		else
			index = two_bpos-acc;
 22e:	d8 2e       	mov	r13, r24
 230:	dc 1a       	sub	r13, r28

		if((index < 0) | (index >74))		//Check for out of bounds access
 232:	8a e4       	ldi	r24, 0x4A	; 74
 234:	8d 15       	cp	r24, r13
 236:	20 f4       	brcc	.+8      	; 0x240 <rtr_speed+0x42>
			uart_str("INDEX ERROR");
 238:	85 e2       	ldi	r24, 0x25	; 37
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>

		speed_acc_one += cbuf_one_dif[index];
 240:	8d 2d       	mov	r24, r13
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	fc 01       	movw	r30, r24
 24a:	eb 53       	subi	r30, 0x3B	; 59
 24c:	fc 4f       	sbci	r31, 0xFC	; 252
 24e:	20 81       	ld	r18, Z
 250:	31 81       	ldd	r19, Z+1	; 0x01
 252:	e2 0e       	add	r14, r18
 254:	f3 1e       	adc	r15, r19
		speed_acc_two += cbuf_two_dif[index];
 256:	fc 01       	movw	r30, r24
 258:	ec 51       	subi	r30, 0x1C	; 28
 25a:	fd 4f       	sbci	r31, 0xFD	; 253
 25c:	80 81       	ld	r24, Z
 25e:	91 81       	ldd	r25, Z+1	; 0x01
 260:	08 0f       	add	r16, r24
 262:	19 1f       	adc	r17, r25
 264:	21 96       	adiw	r28, 0x01	; 1
	static uint8_t speed_warn_buff_21 = 0;
	static uint8_t speed_warn_22 = 0;
	static uint8_t speed_warn_buff_22 = 0;

	uint8_t acc;		//25 positions per second = speed over a second
	for(acc = 0; acc <= 25; acc++){
 266:	ca 31       	cpi	r28, 0x1A	; 26
 268:	d1 05       	cpc	r29, r1
 26a:	b1 f6       	brne	.-84     	; 0x218 <rtr_speed+0x1a>

		speed_acc_one += cbuf_one_dif[index];
		speed_acc_two += cbuf_two_dif[index];
	}
	
	if(abs(speed_acc_one) > 16)
 26c:	c7 01       	movw	r24, r14
 26e:	99 23       	and	r25, r25
 270:	24 f4       	brge	.+8      	; 0x27a <rtr_speed+0x7c>
 272:	88 27       	eor	r24, r24
 274:	99 27       	eor	r25, r25
 276:	8e 19       	sub	r24, r14
 278:	9f 09       	sbc	r25, r15
 27a:	81 31       	cpi	r24, 0x11	; 17
 27c:	91 05       	cpc	r25, r1
 27e:	24 f0       	brlt	.+8      	; 0x288 <rtr_speed+0x8a>
		speed_warn_11 = 1;
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	20 93 e0 02 	sts	0x02E0, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <rtr_speed+0x8e>
	else
		speed_warn_11 = 0;
 288:	10 92 e0 02 	sts	0x02E0, r1
		
	if(abs(speed_acc_one) > 32)
 28c:	81 97       	sbiw	r24, 0x21	; 33
 28e:	24 f0       	brlt	.+8      	; 0x298 <rtr_speed+0x9a>
		speed_warn_12 = 1;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 df 02 	sts	0x02DF, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <rtr_speed+0x9e>
	else
		speed_warn_12 = 0;
 298:	10 92 df 02 	sts	0x02DF, r1
		
	if(!speed_warn_buff_11 && speed_warn_11)
 29c:	80 91 de 02 	lds	r24, 0x02DE
 2a0:	81 11       	cpse	r24, r1
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <rtr_speed+0xb8>
 2a4:	80 91 e0 02 	lds	r24, 0x02E0
 2a8:	88 23       	and	r24, r24
 2aa:	69 f0       	breq	.+26     	; 0x2c6 <rtr_speed+0xc8>
		uart_str("Rotary encoder 1 SPEED WARNING(1)\n");
 2ac:	81 e3       	ldi	r24, 0x31	; 49
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
 2b4:	08 c0       	rjmp	.+16     	; 0x2c6 <rtr_speed+0xc8>
	else if (speed_warn_buff_11 && !speed_warn_11)
 2b6:	80 91 e0 02 	lds	r24, 0x02E0
 2ba:	81 11       	cpse	r24, r1
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <rtr_speed+0xc8>
		uart_str("Rotary encoder 1 SPEED CLEAR(1)\n");
 2be:	84 e5       	ldi	r24, 0x54	; 84
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
		
	if(!speed_warn_buff_12 && speed_warn_12)
 2c6:	80 91 dd 02 	lds	r24, 0x02DD
 2ca:	81 11       	cpse	r24, r1
 2cc:	09 c0       	rjmp	.+18     	; 0x2e0 <rtr_speed+0xe2>
 2ce:	80 91 df 02 	lds	r24, 0x02DF
 2d2:	88 23       	and	r24, r24
 2d4:	69 f0       	breq	.+26     	; 0x2f0 <rtr_speed+0xf2>
		uart_str("Rotary encoder 1 SPEED WARNING(2)\n");
 2d6:	85 e7       	ldi	r24, 0x75	; 117
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
 2de:	08 c0       	rjmp	.+16     	; 0x2f0 <rtr_speed+0xf2>
	else if (speed_warn_buff_12 && !speed_warn_12)
 2e0:	80 91 df 02 	lds	r24, 0x02DF
 2e4:	81 11       	cpse	r24, r1
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <rtr_speed+0xf2>
		uart_str("Rotary encoder 1 SPEED CLEAR(2)\n");	
 2e8:	88 e9       	ldi	r24, 0x98	; 152
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
	
	if(abs(speed_acc_two) > 16)
 2f0:	c8 01       	movw	r24, r16
 2f2:	99 23       	and	r25, r25
 2f4:	24 f4       	brge	.+8      	; 0x2fe <rtr_speed+0x100>
 2f6:	88 27       	eor	r24, r24
 2f8:	99 27       	eor	r25, r25
 2fa:	80 1b       	sub	r24, r16
 2fc:	91 0b       	sbc	r25, r17
 2fe:	81 31       	cpi	r24, 0x11	; 17
 300:	91 05       	cpc	r25, r1
 302:	24 f0       	brlt	.+8      	; 0x30c <rtr_speed+0x10e>
		speed_warn_21 = 1;
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	20 93 dc 02 	sts	0x02DC, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <rtr_speed+0x112>
	else
		speed_warn_21 = 0;
 30c:	10 92 dc 02 	sts	0x02DC, r1
		
	if(abs(speed_acc_two) > 32)
 310:	81 97       	sbiw	r24, 0x21	; 33
 312:	24 f0       	brlt	.+8      	; 0x31c <rtr_speed+0x11e>
		speed_warn_22 = 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 db 02 	sts	0x02DB, r24
 31a:	02 c0       	rjmp	.+4      	; 0x320 <rtr_speed+0x122>
	else
		speed_warn_22 = 0;
 31c:	10 92 db 02 	sts	0x02DB, r1
		
	if(!speed_warn_buff_21 && speed_warn_21)
 320:	80 91 da 02 	lds	r24, 0x02DA
 324:	81 11       	cpse	r24, r1
 326:	09 c0       	rjmp	.+18     	; 0x33a <rtr_speed+0x13c>
 328:	80 91 dc 02 	lds	r24, 0x02DC
 32c:	88 23       	and	r24, r24
 32e:	69 f0       	breq	.+26     	; 0x34a <rtr_speed+0x14c>
		uart_str("Rotary encoder 2 SPEED WARNING(1)\n");
 330:	89 eb       	ldi	r24, 0xB9	; 185
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
 338:	08 c0       	rjmp	.+16     	; 0x34a <rtr_speed+0x14c>
	else if (speed_warn_buff_21 && !speed_warn_21)
 33a:	80 91 dc 02 	lds	r24, 0x02DC
 33e:	81 11       	cpse	r24, r1
 340:	04 c0       	rjmp	.+8      	; 0x34a <rtr_speed+0x14c>
		uart_str("Rotary encoder 2 SPEED CLEAR(1)\n");
 342:	8c ed       	ldi	r24, 0xDC	; 220
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
		
	if(!speed_warn_buff_22 && speed_warn_22)
 34a:	80 91 d9 02 	lds	r24, 0x02D9
 34e:	81 11       	cpse	r24, r1
 350:	09 c0       	rjmp	.+18     	; 0x364 <rtr_speed+0x166>
 352:	80 91 db 02 	lds	r24, 0x02DB
 356:	88 23       	and	r24, r24
 358:	69 f0       	breq	.+26     	; 0x374 <rtr_speed+0x176>
		uart_str("Rotary encoder 2 SPEED WARNING(2)\n");
 35a:	8d ef       	ldi	r24, 0xFD	; 253
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>
 362:	08 c0       	rjmp	.+16     	; 0x374 <rtr_speed+0x176>
	else if (speed_warn_buff_22 && !speed_warn_22)
 364:	80 91 db 02 	lds	r24, 0x02DB
 368:	81 11       	cpse	r24, r1
 36a:	04 c0       	rjmp	.+8      	; 0x374 <rtr_speed+0x176>
		uart_str("Rotary encoder 2 SPEED CLEAR(2)\n");
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	92 e0       	ldi	r25, 0x02	; 2
 370:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <uart_str>

	
	speed_warn_buff_11 = speed_warn_11;
 374:	80 91 e0 02 	lds	r24, 0x02E0
 378:	80 93 de 02 	sts	0x02DE, r24
	speed_warn_buff_12 = speed_warn_12;
 37c:	80 91 df 02 	lds	r24, 0x02DF
 380:	80 93 dd 02 	sts	0x02DD, r24
	speed_warn_buff_21 = speed_warn_21;
 384:	80 91 dc 02 	lds	r24, 0x02DC
 388:	80 93 da 02 	sts	0x02DA, r24
	speed_warn_buff_22 = speed_warn_22;
 38c:	80 91 db 02 	lds	r24, 0x02DB
 390:	80 93 d9 02 	sts	0x02D9, r24
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	ef 90       	pop	r14
 3a0:	df 90       	pop	r13
 3a2:	08 95       	ret

000003a4 <rtr_buff_update>:
{
	//uart_str("Entered buff\n");
	uint8_t im1;
	uint8_t jm1;

	if(one_bpos == 0)			//Take care of circlular buffer "overflow"
 3a4:	90 91 e3 02 	lds	r25, 0x02E3
 3a8:	99 23       	and	r25, r25
 3aa:	19 f0       	breq	.+6      	; 0x3b2 <rtr_buff_update+0xe>
		im1 = 74;
	else
		im1 = one_bpos-1;
 3ac:	af ef       	ldi	r26, 0xFF	; 255
 3ae:	a9 0f       	add	r26, r25
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <rtr_buff_update+0x10>
	//uart_str("Entered buff\n");
	uint8_t im1;
	uint8_t jm1;

	if(one_bpos == 0)			//Take care of circlular buffer "overflow"
		im1 = 74;
 3b2:	aa e4       	ldi	r26, 0x4A	; 74
	else
		im1 = one_bpos-1;

	if(two_bpos == 0)
 3b4:	80 91 e2 02 	lds	r24, 0x02E2
 3b8:	88 23       	and	r24, r24
 3ba:	19 f0       	breq	.+6      	; 0x3c2 <rtr_buff_update+0x1e>
		jm1 = 74;
	else
		jm1 = two_bpos-1;
 3bc:	3f ef       	ldi	r19, 0xFF	; 255
 3be:	38 0f       	add	r19, r24
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <rtr_buff_update+0x20>
		im1 = 74;
	else
		im1 = one_bpos-1;

	if(two_bpos == 0)
		jm1 = 74;
 3c2:	3a e4       	ldi	r19, 0x4A	; 74
	else
		jm1 = two_bpos-1;

	if(!sel){
 3c4:	20 91 a6 04 	lds	r18, 0x04A6
 3c8:	21 11       	cpse	r18, r1
 3ca:	52 c0       	rjmp	.+164    	; 0x470 <rtr_buff_update+0xcc>
		cbuf_one[one_bpos] = rtr_pos_one;					//Update Cbuf and Cdif 
 3cc:	89 2f       	mov	r24, r25
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	20 91 a8 04 	lds	r18, 0x04A8
 3d4:	fc 01       	movw	r30, r24
 3d6:	e5 5a       	subi	r30, 0xA5	; 165
 3d8:	fb 4f       	sbci	r31, 0xFB	; 251
 3da:	20 83       	st	Z, r18
		if((cbuf_one[one_bpos] <28) && (cbuf_one[im1] >100)){ // Dealing with wrap around in circular buffer
 3dc:	2c 31       	cpi	r18, 0x1C	; 28
 3de:	a8 f4       	brcc	.+42     	; 0x40a <rtr_buff_update+0x66>
 3e0:	ea 2f       	mov	r30, r26
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	e5 5a       	subi	r30, 0xA5	; 165
 3e6:	fb 4f       	sbci	r31, 0xFB	; 251
 3e8:	30 81       	ld	r19, Z
 3ea:	35 36       	cpi	r19, 0x65	; 101
 3ec:	70 f0       	brcs	.+28     	; 0x40a <rtr_buff_update+0x66>
			cbuf_one_dif[one_bpos] = (cbuf_one[one_bpos] + (128 - cbuf_one[im1]));
 3ee:	fc 01       	movw	r30, r24
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	eb 53       	subi	r30, 0x3B	; 59
 3f6:	fc 4f       	sbci	r31, 0xFC	; 252
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	83 1b       	sub	r24, r19
 3fe:	91 09       	sbc	r25, r1
 400:	82 0f       	add	r24, r18
 402:	91 1d       	adc	r25, r1
 404:	91 83       	std	Z+1, r25	; 0x01
 406:	80 83       	st	Z, r24
 408:	26 c0       	rjmp	.+76     	; 0x456 <rtr_buff_update+0xb2>
			//uart_str("Wrapped");							//DEBUG
			//uart_number(abs(cbuf_one_dif[one_bpos]));
			//uart_str("\n");
		}
		else if((cbuf_one[one_bpos] >100) && (cbuf_one[im1] <28)){
 40a:	25 36       	cpi	r18, 0x65	; 101
 40c:	a8 f0       	brcs	.+42     	; 0x438 <rtr_buff_update+0x94>
 40e:	ea 2f       	mov	r30, r26
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	e5 5a       	subi	r30, 0xA5	; 165
 414:	fb 4f       	sbci	r31, 0xFB	; 251
 416:	30 81       	ld	r19, Z
 418:	3c 31       	cpi	r19, 0x1C	; 28
 41a:	70 f4       	brcc	.+28     	; 0x438 <rtr_buff_update+0x94>
			cbuf_one_dif[one_bpos] = -(cbuf_one[im1] + (128 - cbuf_one[one_bpos]));
 41c:	fc 01       	movw	r30, r24
 41e:	ee 0f       	add	r30, r30
 420:	ff 1f       	adc	r31, r31
 422:	eb 53       	subi	r30, 0x3B	; 59
 424:	fc 4f       	sbci	r31, 0xFC	; 252
 426:	82 2f       	mov	r24, r18
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	80 58       	subi	r24, 0x80	; 128
 42c:	91 09       	sbc	r25, r1
 42e:	83 1b       	sub	r24, r19
 430:	91 09       	sbc	r25, r1
 432:	91 83       	std	Z+1, r25	; 0x01
 434:	80 83       	st	Z, r24
 436:	0f c0       	rjmp	.+30     	; 0x456 <rtr_buff_update+0xb2>
		}		
		else
			cbuf_one_dif[one_bpos] = cbuf_one[one_bpos] - cbuf_one[im1];
 438:	fc 01       	movw	r30, r24
 43a:	ee 0f       	add	r30, r30
 43c:	ff 1f       	adc	r31, r31
 43e:	eb 53       	subi	r30, 0x3B	; 59
 440:	fc 4f       	sbci	r31, 0xFC	; 252
 442:	82 2f       	mov	r24, r18
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	a5 5a       	subi	r26, 0xA5	; 165
 44a:	bb 4f       	sbci	r27, 0xFB	; 251
 44c:	2c 91       	ld	r18, X
 44e:	82 1b       	sub	r24, r18
 450:	91 09       	sbc	r25, r1
 452:	91 83       	std	Z+1, r25	; 0x01
 454:	80 83       	st	Z, r24
		
		rtr_speed();		// Called here to keep positional buffer location
 456:	0e 94 ff 00 	call	0x1fe	; 0x1fe <rtr_speed>

		if(one_bpos == 74)
 45a:	80 91 e3 02 	lds	r24, 0x02E3
 45e:	8a 34       	cpi	r24, 0x4A	; 74
 460:	19 f4       	brne	.+6      	; 0x468 <rtr_buff_update+0xc4>
		one_bpos = 0;
 462:	10 92 e3 02 	sts	0x02E3, r1
 466:	08 95       	ret
		else
		one_bpos++;
 468:	8f 5f       	subi	r24, 0xFF	; 255
 46a:	80 93 e3 02 	sts	0x02E3, r24
 46e:	08 95       	ret
	}
	else{
		cbuf_two[two_bpos] = rtr_pos_two;
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	20 91 a7 04 	lds	r18, 0x04A7
 476:	fc 01       	movw	r30, r24
 478:	e6 58       	subi	r30, 0x86	; 134
 47a:	fc 4f       	sbci	r31, 0xFC	; 252
 47c:	20 83       	st	Z, r18
		if((cbuf_two[two_bpos] <28) && (cbuf_two[jm1] >100))		// Dealing with wrap around in circular buffer
 47e:	2c 31       	cpi	r18, 0x1C	; 28
 480:	a8 f4       	brcc	.+42     	; 0x4ac <rtr_buff_update+0x108>
 482:	e3 2f       	mov	r30, r19
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	e6 58       	subi	r30, 0x86	; 134
 488:	fc 4f       	sbci	r31, 0xFC	; 252
 48a:	40 81       	ld	r20, Z
 48c:	45 36       	cpi	r20, 0x65	; 101
 48e:	70 f0       	brcs	.+28     	; 0x4ac <rtr_buff_update+0x108>
			cbuf_two_dif[two_bpos] = (cbuf_two[two_bpos] + (128 - cbuf_two[jm1]));
 490:	fc 01       	movw	r30, r24
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	ec 51       	subi	r30, 0x1C	; 28
 498:	fd 4f       	sbci	r31, 0xFD	; 253
 49a:	80 e8       	ldi	r24, 0x80	; 128
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	84 1b       	sub	r24, r20
 4a0:	91 09       	sbc	r25, r1
 4a2:	82 0f       	add	r24, r18
 4a4:	91 1d       	adc	r25, r1
 4a6:	91 83       	std	Z+1, r25	; 0x01
 4a8:	80 83       	st	Z, r24
 4aa:	27 c0       	rjmp	.+78     	; 0x4fa <rtr_buff_update+0x156>
		else if((cbuf_two[two_bpos] >100) && (cbuf_two[jm1] <28))
 4ac:	25 36       	cpi	r18, 0x65	; 101
 4ae:	a8 f0       	brcs	.+42     	; 0x4da <rtr_buff_update+0x136>
 4b0:	e3 2f       	mov	r30, r19
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	e6 58       	subi	r30, 0x86	; 134
 4b6:	fc 4f       	sbci	r31, 0xFC	; 252
 4b8:	40 81       	ld	r20, Z
 4ba:	4c 31       	cpi	r20, 0x1C	; 28
 4bc:	70 f4       	brcc	.+28     	; 0x4da <rtr_buff_update+0x136>
			cbuf_two_dif[two_bpos] = -(cbuf_two[jm1] + (128 - cbuf_two[two_bpos]));
 4be:	fc 01       	movw	r30, r24
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	ec 51       	subi	r30, 0x1C	; 28
 4c6:	fd 4f       	sbci	r31, 0xFD	; 253
 4c8:	82 2f       	mov	r24, r18
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	80 58       	subi	r24, 0x80	; 128
 4ce:	91 09       	sbc	r25, r1
 4d0:	84 1b       	sub	r24, r20
 4d2:	91 09       	sbc	r25, r1
 4d4:	91 83       	std	Z+1, r25	; 0x01
 4d6:	80 83       	st	Z, r24
 4d8:	10 c0       	rjmp	.+32     	; 0x4fa <rtr_buff_update+0x156>
		else
			cbuf_two_dif[two_bpos] = cbuf_two[two_bpos] - cbuf_two[jm1];
 4da:	fc 01       	movw	r30, r24
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	ec 51       	subi	r30, 0x1C	; 28
 4e2:	fd 4f       	sbci	r31, 0xFD	; 253
 4e4:	82 2f       	mov	r24, r18
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	a3 2f       	mov	r26, r19
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	a6 58       	subi	r26, 0x86	; 134
 4ee:	bc 4f       	sbci	r27, 0xFC	; 252
 4f0:	2c 91       	ld	r18, X
 4f2:	82 1b       	sub	r24, r18
 4f4:	91 09       	sbc	r25, r1
 4f6:	91 83       	std	Z+1, r25	; 0x01
 4f8:	80 83       	st	Z, r24
		
		rtr_speed();		// Called here to keep positional buffer location
 4fa:	0e 94 ff 00 	call	0x1fe	; 0x1fe <rtr_speed>

		if(two_bpos == 74)
 4fe:	80 91 e2 02 	lds	r24, 0x02E2
 502:	8a 34       	cpi	r24, 0x4A	; 74
 504:	19 f4       	brne	.+6      	; 0x50c <rtr_buff_update+0x168>
			two_bpos = 0;
 506:	10 92 e2 02 	sts	0x02E2, r1
 50a:	08 95       	ret
		else
			two_bpos++;
 50c:	8f 5f       	subi	r24, 0xFF	; 255
 50e:	80 93 e2 02 	sts	0x02E2, r24
 512:	08 95       	ret

00000514 <rtr_intrpt>:
			////uart_number(rtr_pos_two);
		//}
		//buff_two = rtr_pos_two;
	//}
	////uart_str("Checked encoder pos\n");
	rtr_qpos(sel);
 514:	80 91 a6 04 	lds	r24, 0x04A6
 518:	0e 94 ac 00 	call	0x158	; 0x158 <rtr_qpos>
	rtr_buff_update();
 51c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <rtr_buff_update>


	sel = !sel;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 91 a6 04 	lds	r25, 0x04A6
 526:	91 11       	cpse	r25, r1
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	80 93 a6 04 	sts	0x04A6, r24
 52e:	08 95       	ret

00000530 <timer_init>:
//static uint8_t[8] rot_one = {0,0,0,0,0,0,0,0};
//static uint8_t[8] rot_two = {0,0,0,0,0,0,0,0};

void timer_init()
{
	OCR0A = F_CPU / 1024 / 50;   // Set up compare value for 50 Hz interrupt generation.
 530:	8a ee       	ldi	r24, 0xEA	; 234
 532:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);               // Enable CTC mode
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = _BV(OCIE0A);                // Enable Timer0 Compare Match A interrupt
 538:	80 93 6e 00 	sts	0x006E, r24
	TCCR0B = (1 << CS02) | (0 << CS01) | (1 << CS00); // Initilise timer1 with /1024 prescaler	
 53c:	85 e0       	ldi	r24, 0x05	; 5
 53e:	85 bd       	out	0x25, r24	; 37
 540:	08 95       	ret

00000542 <__vector_16>:
}

ISR(TIMER0_COMPA_vect)
{
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	11 24       	eor	r1, r1
 54c:	2f 93       	push	r18
 54e:	3f 93       	push	r19
 550:	4f 93       	push	r20
 552:	5f 93       	push	r21
 554:	6f 93       	push	r22
 556:	7f 93       	push	r23
 558:	8f 93       	push	r24
 55a:	9f 93       	push	r25
 55c:	af 93       	push	r26
 55e:	bf 93       	push	r27
 560:	ef 93       	push	r30
 562:	ff 93       	push	r31
	//uart_str("Entered timer interrupt\n");
	rtr_intrpt();
 564:	0e 94 8a 02 	call	0x514	; 0x514 <rtr_intrpt>
	
	
	//rtr_position();
	//uart_data(rtr_position());
	//uart_data(rtr_value());
}
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	bf 91       	pop	r27
 56e:	af 91       	pop	r26
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	7f 91       	pop	r23
 576:	6f 91       	pop	r22
 578:	5f 91       	pop	r21
 57a:	4f 91       	pop	r20
 57c:	3f 91       	pop	r19
 57e:	2f 91       	pop	r18
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <uart_init>:


void uart_init(void)
{
	/* Configure 9600 baud, 8-bit, no parity and one stop bit */
	UBRR0H = (F_CPU/(UART_BAUD*16L)-1) >> 8;
 58a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (F_CPU/(UART_BAUD*16L)-1);
 58e:	8d e4       	ldi	r24, 0x4D	; 77
 590:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 594:	88 e1       	ldi	r24, 0x18	; 24
 596:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 59a:	86 e0       	ldi	r24, 0x06	; 6
 59c:	80 93 c2 00 	sts	0x00C2, r24
 5a0:	08 95       	ret

000005a2 <uart_tx>:


void uart_tx(char ch)
{

	while (!(UCSR0A & _BV(UDRE0)));
 5a2:	e0 ec       	ldi	r30, 0xC0	; 192
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	90 81       	ld	r25, Z
 5a8:	95 ff       	sbrs	r25, 5
 5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <uart_tx+0x4>
	UDR0 = ch;
 5ac:	80 93 c6 00 	sts	0x00C6, r24
 5b0:	08 95       	ret

000005b2 <uart_str>:
	UDR0 = d;

}

void uart_str(char *str)
{
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	ec 01       	movw	r28, r24
	int i;
	for(i=0; str[i]; i++) uart_tx(str[i]);
 5b8:	88 81       	ld	r24, Y
 5ba:	88 23       	and	r24, r24
 5bc:	31 f0       	breq	.+12     	; 0x5ca <uart_str+0x18>
 5be:	21 96       	adiw	r28, 0x01	; 1
 5c0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <uart_tx>
 5c4:	89 91       	ld	r24, Y+
 5c6:	81 11       	cpse	r24, r1
 5c8:	fb cf       	rjmp	.-10     	; 0x5c0 <uart_str+0xe>
}
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
