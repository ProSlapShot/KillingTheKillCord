
RotaryEnc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  000001e8  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800182  00800182  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000042c  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000030d  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  00000b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d5  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020f  00000000  00000000  000011b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 ee       	ldi	r30, 0xE8	; 232
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 38       	cpi	r26, 0x82	; 130
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e8       	ldi	r26, 0x82	; 130
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 38       	cpi	r26, 0x84	; 132
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:



int main(void)
{
	uart_init();
  ba:	0e 94 de 00 	call	0x1bc	; 0x1bc <uart_init>
	timer_init();
  be:	0e 94 af 00 	call	0x15e	; 0x15e <timer_init>
	rot_init();
  c2:	0e 94 65 00 	call	0xca	; 0xca <rot_init>
	sei();
  c6:	78 94       	sei
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0xe>

000000ca <rot_init>:
static uint8_t waiting = 0;
static uint8_t rtr_pos = 0;

void rot_init()
{
		RTR_DDR |= ~pins; //Set Port C as inputs
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	84 b9       	out	0x04, r24	; 4
		RTR_PORT |= pins; // Enable pull up resistors
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	85 b9       	out	0x05, r24	; 5
		
		PCICR = _BV(PCIE1); //Enable interrupts on Port B
  d4:	92 e0       	ldi	r25, 0x02	; 2
  d6:	90 93 68 00 	sts	0x0068, r25
		PCMSK1 |= pins; //Set pins on Port B as interrupts			
  da:	ec e6       	ldi	r30, 0x6C	; 108
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	80 83       	st	Z, r24
			
		tmp = (RTR_PIN & pins);		// Initial button status
  e2:	83 b1       	in	r24, 0x03	; 3
  e4:	80 93 00 01 	sts	0x0100, r24
  e8:	08 95       	ret

000000ea <__vector_5>:
		
}

ISR(PCINT1_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	waiting |= (RTR_PIN & pins) ^ tmp;		//Need to mask pins
  f8:	93 b1       	in	r25, 0x03	; 3
  fa:	80 91 00 01 	lds	r24, 0x0100
  fe:	89 27       	eor	r24, r25
 100:	90 91 83 01 	lds	r25, 0x0183
 104:	89 2b       	or	r24, r25
 106:	80 93 83 01 	sts	0x0183, r24
	tmp = (RTR_PIN & pins);
 10a:	83 b1       	in	r24, 0x03	; 3
 10c:	80 93 00 01 	sts	0x0100, r24
}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <rtr_value>:

uint8_t rtr_value()
{
	return RTR_PIN & pins;
 11e:	83 b1       	in	r24, 0x03	; 3
}
 120:	08 95       	ret

00000122 <rtr_position>:


uint8_t rtr_position()
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
	if (waiting)
 126:	80 91 83 01 	lds	r24, 0x0183
 12a:	88 23       	and	r24, r24
 12c:	89 f0       	breq	.+34     	; 0x150 <rtr_position+0x2e>
 12e:	c0 e0       	ldi	r28, 0x00	; 0
		//uart_str("Entered WAITING function.\n");
		uint8_t i = 0;
	
		for(i=0 ; i<=127 ; i++)
		{
			if(rtrlut[i] == rtr_value())
 130:	ec 2f       	mov	r30, r28
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ef 5f       	subi	r30, 0xFF	; 255
 136:	fe 4f       	sbci	r31, 0xFE	; 254
 138:	d0 81       	ld	r29, Z
 13a:	0e 94 8f 00 	call	0x11e	; 0x11e <rtr_value>
 13e:	d8 13       	cpse	r29, r24
 140:	04 c0       	rjmp	.+8      	; 0x14a <rtr_position+0x28>
				uart_str("i = ");
				uart_data(i);
				uart_str("\nRotary Position = ");
				uart_data(rtr_pos);
				uart_str("\n");		*/
				rtr_pos = i;
 142:	c0 93 82 01 	sts	0x0182, r28
				return i;
 146:	8c 2f       	mov	r24, r28
 148:	07 c0       	rjmp	.+14     	; 0x158 <rtr_position+0x36>
	if (waiting)
	{
		//uart_str("Entered WAITING function.\n");
		uint8_t i = 0;
	
		for(i=0 ; i<=127 ; i++)
 14a:	cf 5f       	subi	r28, 0xFF	; 255
 14c:	8a f7       	brpl	.-30     	; 0x130 <rtr_position+0xe>
 14e:	03 c0       	rjmp	.+6      	; 0x156 <rtr_position+0x34>
	
		return RTR_INVALID;
	}
	//uart_str("No Pin change \n");
	
	return rtr_pos;
 150:	80 91 82 01 	lds	r24, 0x0182
 154:	01 c0       	rjmp	.+2      	; 0x158 <rtr_position+0x36>
				rtr_pos = i;
				return i;
			}
		}
	
		return RTR_INVALID;
 156:	8f ef       	ldi	r24, 0xFF	; 255
	}
	//uart_str("No Pin change \n");
	
	return rtr_pos;
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <timer_init>:
#define timer_freq 50


void timer_init()
{
	OCR0A = F_CPU / 1024 / 50;   // Set up compare value for 50 Hz interrupt generation.
 15e:	8a ee       	ldi	r24, 0xEA	; 234
 160:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);               // Enable CTC mode
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = _BV(OCIE0A);                // Enable Timer0 Compare Match A interrupt
 166:	80 93 6e 00 	sts	0x006E, r24
	TCCR0B = (1 << CS02) | (0 << CS01) | (1 << CS00); // Initilise timer1 with /1024 prescaler	
 16a:	85 e0       	ldi	r24, 0x05	; 5
 16c:	85 bd       	out	0x25, r24	; 37
 16e:	08 95       	ret

00000170 <__vector_16>:
}

ISR(TIMER0_COMPA_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	//rtr_position();
	uart_data(rtr_position());
 192:	0e 94 91 00 	call	0x122	; 0x122 <rtr_position>
 196:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <uart_data>
	//uart_data(rtr_value());
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <uart_init>:


void uart_init(void)
{
	/* Configure 9600 baud, 8-bit, no parity and one stop bit */
	UBRR0H = (F_CPU/(UART_BAUD*16L)-1) >> 8;
 1bc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (F_CPU/(UART_BAUD*16L)-1);
 1c0:	8d e4       	ldi	r24, 0x4D	; 77
 1c2:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 1c6:	88 e1       	ldi	r24, 0x18	; 24
 1c8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	80 93 c2 00 	sts	0x00C2, r24
 1d2:	08 95       	ret

000001d4 <uart_data>:
}

void uart_data(uint8_t d)
{

	while (!(UCSR0A & _BV(UDRE0)));
 1d4:	e0 ec       	ldi	r30, 0xC0	; 192
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	90 81       	ld	r25, Z
 1da:	95 ff       	sbrs	r25, 5
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <uart_data+0x4>
	UDR0 = d;
 1de:	80 93 c6 00 	sts	0x00C6, r24
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
