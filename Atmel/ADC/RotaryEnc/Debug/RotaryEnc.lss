
RotaryEnc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  000004b0  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002cb  008001da  008001da  0000061e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000866  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000445  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044c  00000000  00000000  000013e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000264  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000354  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005b5  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000023a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_4>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 ef 01 	jmp	0x3de	; 0x3de <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 eb       	ldi	r30, 0xB0	; 176
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 3d       	cpi	r26, 0xDA	; 218
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	24 e0       	ldi	r18, 0x04	; 4
  a0:	aa ed       	ldi	r26, 0xDA	; 218
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a5 3a       	cpi	r26, 0xA5	; 165
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:



int main(void)
{
	uart_init();
  ba:	0e 94 13 02 	call	0x426	; 0x426 <uart_init>
	timer_init();
  be:	0e 94 e6 01 	call	0x3cc	; 0x3cc <timer_init>
	rot_init();
  c2:	0e 94 65 00 	call	0xca	; 0xca <rot_init>
	sei();
  c6:	78 94       	sei
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0xe>

000000ca <rot_init>:
static uint8_t two_bpos = 0;


void rot_init()
{
		RTR_DDR |= ~pins; //Set Port C as inputs
  ca:	81 b1       	in	r24, 0x01	; 1
  cc:	81 b9       	out	0x01, r24	; 1
		RTR_PORT |= pins; // Enable pull up resistors
  ce:	82 b1       	in	r24, 0x02	; 2
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	82 b9       	out	0x02, r24	; 2
		
		PCICR = _BV(PCIE0); //Enable interrupts on Port B
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	90 93 68 00 	sts	0x0068, r25
		PCMSK0 |= pins; //Set pins on Port B as interrupts	
  da:	eb e6       	ldi	r30, 0x6B	; 107
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	80 83       	st	Z, r24
		
		DDRD |= _BV(PIND3);			//Rotary Select Pin	
  e2:	53 9a       	sbi	0x0a, 3	; 10
		PORTD |= _BV(PIND3);
  e4:	5b 9a       	sbi	0x0b, 3	; 11
			
		tmp_two = (RTR_PIN & pins);		// Initial encoder status (2)
  e6:	80 b1       	in	r24, 0x00	; 0
  e8:	80 93 00 01 	sts	0x0100, r24
		
		PORTD &= ~_BV(PIND3);
  ec:	5b 98       	cbi	0x0b, 3	; 11
		tmp_one = (RTR_PIN & pins);		
  ee:	80 b1       	in	r24, 0x00	; 0
  f0:	80 93 01 01 	sts	0x0101, r24
  f4:	e5 ea       	ldi	r30, 0xA5	; 165
  f6:	f3 e0       	ldi	r31, 0x03	; 3
  f8:	85 ea       	ldi	r24, 0xA5	; 165
  fa:	94 e0       	ldi	r25, 0x04	; 4
		
		int fill = 0;
		for(fill = 0; fill <= 255; fill++)	// Set all invalid en
			rtrlut_fast[fill] = 255;
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	21 93       	st	Z+, r18
		
		PORTD &= ~_BV(PIND3);
		tmp_one = (RTR_PIN & pins);		
		
		int fill = 0;
		for(fill = 0; fill <= 255; fill++)	// Set all invalid en
 100:	e8 17       	cp	r30, r24
 102:	f9 07       	cpc	r31, r25
 104:	e1 f7       	brne	.-8      	; 0xfe <rot_init+0x34>
 106:	e9 e5       	ldi	r30, 0x59	; 89
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	80 e0       	ldi	r24, 0x00	; 0
			rtrlut_fast[fill] = 255;
		for(fill = 0; fill <= 127; fill++)
			rtrlut_fast[rtrlut[fill]] = fill; 
 10c:	a1 91       	ld	r26, Z+
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	ab 55       	subi	r26, 0x5B	; 91
 112:	bc 4f       	sbci	r27, 0xFC	; 252
 114:	8c 93       	st	X, r24
 116:	8f 5f       	subi	r24, 0xFF	; 255
		tmp_one = (RTR_PIN & pins);		
		
		int fill = 0;
		for(fill = 0; fill <= 255; fill++)	// Set all invalid en
			rtrlut_fast[fill] = 255;
		for(fill = 0; fill <= 127; fill++)
 118:	80 38       	cpi	r24, 0x80	; 128
 11a:	c1 f7       	brne	.-16     	; 0x10c <rot_init+0x42>
			rtrlut_fast[rtrlut[fill]] = fill; 
		
			
}
 11c:	08 95       	ret

0000011e <__vector_4>:

ISR(PCINT0_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	uart_str("Button interrupt\n");
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 27 02 	call	0x44e	; 0x44e <uart_str>
	if(!sel){
 148:	80 91 a0 03 	lds	r24, 0x03A0
 14c:	81 11       	cpse	r24, r1
 14e:	0d c0       	rjmp	.+26     	; 0x16a <__vector_4+0x4c>
		waiting_one |= (RTR_PIN & pins) ^ tmp_one;		//Need to mask pins
 150:	90 b1       	in	r25, 0x00	; 0
 152:	80 91 01 01 	lds	r24, 0x0101
 156:	89 27       	eor	r24, r25
 158:	90 91 a4 03 	lds	r25, 0x03A4
 15c:	89 2b       	or	r24, r25
 15e:	80 93 a4 03 	sts	0x03A4, r24
		tmp_one = (RTR_PIN & pins);
 162:	80 b1       	in	r24, 0x00	; 0
 164:	80 93 01 01 	sts	0x0101, r24
 168:	0c c0       	rjmp	.+24     	; 0x182 <__vector_4+0x64>
	}
	else{
		waiting_two |= (RTR_PIN & pins) ^ tmp_two;		//Need to mask pins
 16a:	90 b1       	in	r25, 0x00	; 0
 16c:	80 91 00 01 	lds	r24, 0x0100
 170:	89 27       	eor	r24, r25
 172:	90 91 a2 03 	lds	r25, 0x03A2
 176:	89 2b       	or	r24, r25
 178:	80 93 a2 03 	sts	0x03A2, r24
		tmp_two = (RTR_PIN & pins);
 17c:	80 b1       	in	r24, 0x00	; 0
 17e:	80 93 00 01 	sts	0x0100, r24
	}
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <rtr_value>:
}


uint8_t rtr_value()
{
	return RTR_PIN & pins;
 1a4:	80 b1       	in	r24, 0x00	; 0
}
 1a6:	08 95       	ret

000001a8 <rtr_qpos>:
		tmp_two = (RTR_PIN & pins);
	}
}
uint8_t rtr_qpos(uint8_t x)
{
	if(!x){								//Retrieves encoder one position (0-128)
 1a8:	81 11       	cpse	r24, r1
 1aa:	19 c0       	rjmp	.+50     	; 0x1de <rtr_qpos+0x36>
		PORTD |= _BV(PIND3);
 1ac:	5b 9a       	sbi	0x0b, 3	; 11
		if (waiting_one){
 1ae:	80 91 a4 03 	lds	r24, 0x03A4
 1b2:	88 23       	and	r24, r24
 1b4:	89 f0       	breq	.+34     	; 0x1d8 <rtr_qpos+0x30>
			rtr_pos_one = rtrlut_fast[rtr_value()];
 1b6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <rtr_value>
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	eb 55       	subi	r30, 0x5B	; 91
 1c0:	fc 4f       	sbci	r31, 0xFC	; 252
 1c2:	80 81       	ld	r24, Z
 1c4:	80 93 a3 03 	sts	0x03A3, r24
			return rtrlut_fast[rtr_value()];
 1c8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <rtr_value>
 1cc:	e8 2f       	mov	r30, r24
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	eb 55       	subi	r30, 0x5B	; 91
 1d2:	fc 4f       	sbci	r31, 0xFC	; 252
 1d4:	80 81       	ld	r24, Z
 1d6:	08 95       	ret
		}
		
		return rtr_pos_one;
 1d8:	80 91 a3 03 	lds	r24, 0x03A3
 1dc:	08 95       	ret
	}
	else if(x){							//Retrieves encoder two position (0-128)
		PORTD &= ~_BV(PIND3);
 1de:	5b 98       	cbi	0x0b, 3	; 11
		if (waiting_two)
 1e0:	80 91 a2 03 	lds	r24, 0x03A2
 1e4:	88 23       	and	r24, r24
 1e6:	a9 f0       	breq	.+42     	; 0x212 <rtr_qpos+0x6a>
			if (waiting_one){
 1e8:	80 91 a4 03 	lds	r24, 0x03A4
 1ec:	88 23       	and	r24, r24
 1ee:	89 f0       	breq	.+34     	; 0x212 <rtr_qpos+0x6a>
				rtr_pos_two = rtrlut_fast[rtr_value()];
 1f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <rtr_value>
 1f4:	e8 2f       	mov	r30, r24
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	eb 55       	subi	r30, 0x5B	; 91
 1fa:	fc 4f       	sbci	r31, 0xFC	; 252
 1fc:	80 81       	ld	r24, Z
 1fe:	80 93 a1 03 	sts	0x03A1, r24
				return rtrlut_fast[rtr_value()];
 202:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <rtr_value>
 206:	e8 2f       	mov	r30, r24
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	eb 55       	subi	r30, 0x5B	; 91
 20c:	fc 4f       	sbci	r31, 0xFC	; 252
 20e:	80 81       	ld	r24, Z
 210:	08 95       	ret
			}
			
		
		return rtr_pos_two;
 212:	80 91 a1 03 	lds	r24, 0x03A1
	}
	else
	return RTR_INVALID;
}
 216:	08 95       	ret

00000218 <rtr_buff_update>:
	else
	return RTR_INVALID;
}

void rtr_buff_update()
{
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
	uint8_t im1;
	uint8_t jm1;

	if(one_bpos == 0)			//Take care of circlular buffer "overflow"
 224:	00 91 dd 01 	lds	r16, 0x01DD
 228:	00 23       	and	r16, r16
 22a:	21 f0       	breq	.+8      	; 0x234 <rtr_buff_update+0x1c>
		im1 = 74;
	else
		im1 = one_bpos-1;
 22c:	ee 24       	eor	r14, r14
 22e:	ea 94       	dec	r14
 230:	e0 0e       	add	r14, r16
 232:	04 c0       	rjmp	.+8      	; 0x23c <rtr_buff_update+0x24>
{
	uint8_t im1;
	uint8_t jm1;

	if(one_bpos == 0)			//Take care of circlular buffer "overflow"
		im1 = 74;
 234:	0f 2e       	mov	r0, r31
 236:	fa e4       	ldi	r31, 0x4A	; 74
 238:	ef 2e       	mov	r14, r31
 23a:	f0 2d       	mov	r31, r0
	else
		im1 = one_bpos-1;

	if(two_bpos == 0)
 23c:	10 91 dc 01 	lds	r17, 0x01DC
 240:	11 23       	and	r17, r17
 242:	21 f0       	breq	.+8      	; 0x24c <rtr_buff_update+0x34>
		jm1 = 74;
	else
		jm1 = two_bpos-1;
 244:	ff 24       	eor	r15, r15
 246:	fa 94       	dec	r15
 248:	f1 0e       	add	r15, r17
 24a:	04 c0       	rjmp	.+8      	; 0x254 <rtr_buff_update+0x3c>
		im1 = 74;
	else
		im1 = one_bpos-1;

	if(two_bpos == 0)
		jm1 = 74;
 24c:	0f 2e       	mov	r0, r31
 24e:	fa e4       	ldi	r31, 0x4A	; 74
 250:	ff 2e       	mov	r15, r31
 252:	f0 2d       	mov	r31, r0
	else
		jm1 = two_bpos-1;

	if(!sel){
 254:	80 91 a0 03 	lds	r24, 0x03A0
 258:	81 11       	cpse	r24, r1
 25a:	43 c0       	rjmp	.+134    	; 0x2e2 <rtr_buff_update+0xca>
		cbuf_one[one_bpos] = rtr_qpos(sel);					//Update Cbuf and Cdif 
 25c:	c0 2f       	mov	r28, r16
 25e:	d0 e0       	ldi	r29, 0x00	; 0
 260:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <rtr_qpos>
 264:	fe 01       	movw	r30, r28
 266:	eb 5a       	subi	r30, 0xAB	; 171
 268:	fc 4f       	sbci	r31, 0xFC	; 252
 26a:	80 83       	st	Z, r24
		if((cbuf_one[one_bpos] <2) && (cbuf_one[im1] >126))
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	80 f4       	brcc	.+32     	; 0x290 <rtr_buff_update+0x78>
 270:	ee 2d       	mov	r30, r14
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	eb 5a       	subi	r30, 0xAB	; 171
 276:	fc 4f       	sbci	r31, 0xFC	; 252
 278:	90 81       	ld	r25, Z
 27a:	9f 37       	cpi	r25, 0x7F	; 127
 27c:	48 f0       	brcs	.+18     	; 0x290 <rtr_buff_update+0x78>
			cbuf_one_dif[one_bpos] = 1;
 27e:	cc 0f       	add	r28, r28
 280:	dd 1f       	adc	r29, r29
 282:	c1 54       	subi	r28, 0x41	; 65
 284:	dd 4f       	sbci	r29, 0xFD	; 253
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	99 83       	std	Y+1, r25	; 0x01
 28c:	88 83       	st	Y, r24
 28e:	20 c0       	rjmp	.+64     	; 0x2d0 <rtr_buff_update+0xb8>
		else if((cbuf_one[one_bpos] >126) && (cbuf_one[im1] <2))
 290:	8f 37       	cpi	r24, 0x7F	; 127
 292:	80 f0       	brcs	.+32     	; 0x2b4 <rtr_buff_update+0x9c>
 294:	ae 2d       	mov	r26, r14
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	ab 5a       	subi	r26, 0xAB	; 171
 29a:	bc 4f       	sbci	r27, 0xFC	; 252
 29c:	9c 91       	ld	r25, X
 29e:	92 30       	cpi	r25, 0x02	; 2
 2a0:	48 f4       	brcc	.+18     	; 0x2b4 <rtr_buff_update+0x9c>
			cbuf_one_dif[one_bpos] = -1;
 2a2:	cc 0f       	add	r28, r28
 2a4:	dd 1f       	adc	r29, r29
 2a6:	c1 54       	subi	r28, 0x41	; 65
 2a8:	dd 4f       	sbci	r29, 0xFD	; 253
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
 2ae:	99 83       	std	Y+1, r25	; 0x01
 2b0:	88 83       	st	Y, r24
 2b2:	0e c0       	rjmp	.+28     	; 0x2d0 <rtr_buff_update+0xb8>
		else
			cbuf_one_dif[one_bpos] = cbuf_one[one_bpos] - cbuf_one[im1];
 2b4:	cc 0f       	add	r28, r28
 2b6:	dd 1f       	adc	r29, r29
 2b8:	c1 54       	subi	r28, 0x41	; 65
 2ba:	dd 4f       	sbci	r29, 0xFD	; 253
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	ee 2d       	mov	r30, r14
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	eb 5a       	subi	r30, 0xAB	; 171
 2c4:	fc 4f       	sbci	r31, 0xFC	; 252
 2c6:	20 81       	ld	r18, Z
 2c8:	82 1b       	sub	r24, r18
 2ca:	91 09       	sbc	r25, r1
 2cc:	99 83       	std	Y+1, r25	; 0x01
 2ce:	88 83       	st	Y, r24

		if(one_bpos == 74)
 2d0:	0a 34       	cpi	r16, 0x4A	; 74
 2d2:	19 f4       	brne	.+6      	; 0x2da <rtr_buff_update+0xc2>
			one_bpos = 0;
 2d4:	10 92 dd 01 	sts	0x01DD, r1
 2d8:	46 c0       	rjmp	.+140    	; 0x366 <rtr_buff_update+0x14e>
		else
			one_bpos++;
 2da:	0f 5f       	subi	r16, 0xFF	; 255
 2dc:	00 93 dd 01 	sts	0x01DD, r16
 2e0:	42 c0       	rjmp	.+132    	; 0x366 <rtr_buff_update+0x14e>
	}
	else{
		cbuf_two[two_bpos] = rtr_qpos(sel);
 2e2:	c1 2f       	mov	r28, r17
 2e4:	d0 e0       	ldi	r29, 0x00	; 0
 2e6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <rtr_qpos>
 2ea:	fe 01       	movw	r30, r28
 2ec:	ec 58       	subi	r30, 0x8C	; 140
 2ee:	fd 4f       	sbci	r31, 0xFD	; 253
 2f0:	80 83       	st	Z, r24
		if((cbuf_two[two_bpos] <2) && (cbuf_two[jm1] >126))
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	80 f4       	brcc	.+32     	; 0x316 <rtr_buff_update+0xfe>
 2f6:	ef 2d       	mov	r30, r15
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ec 58       	subi	r30, 0x8C	; 140
 2fc:	fd 4f       	sbci	r31, 0xFD	; 253
 2fe:	90 81       	ld	r25, Z
 300:	9f 37       	cpi	r25, 0x7F	; 127
 302:	48 f0       	brcs	.+18     	; 0x316 <rtr_buff_update+0xfe>
			cbuf_two_dif[two_bpos] = 1;
 304:	cc 0f       	add	r28, r28
 306:	dd 1f       	adc	r29, r29
 308:	c2 52       	subi	r28, 0x22	; 34
 30a:	de 4f       	sbci	r29, 0xFE	; 254
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	99 83       	std	Y+1, r25	; 0x01
 312:	88 83       	st	Y, r24
 314:	20 c0       	rjmp	.+64     	; 0x356 <rtr_buff_update+0x13e>
		else if((cbuf_two[two_bpos] >126) && (cbuf_two[jm1] <2))
 316:	8f 37       	cpi	r24, 0x7F	; 127
 318:	80 f0       	brcs	.+32     	; 0x33a <rtr_buff_update+0x122>
 31a:	af 2d       	mov	r26, r15
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	ac 58       	subi	r26, 0x8C	; 140
 320:	bd 4f       	sbci	r27, 0xFD	; 253
 322:	9c 91       	ld	r25, X
 324:	92 30       	cpi	r25, 0x02	; 2
 326:	48 f4       	brcc	.+18     	; 0x33a <rtr_buff_update+0x122>
			cbuf_two_dif[two_bpos] = -1;
 328:	cc 0f       	add	r28, r28
 32a:	dd 1f       	adc	r29, r29
 32c:	c2 52       	subi	r28, 0x22	; 34
 32e:	de 4f       	sbci	r29, 0xFE	; 254
 330:	8f ef       	ldi	r24, 0xFF	; 255
 332:	9f ef       	ldi	r25, 0xFF	; 255
 334:	99 83       	std	Y+1, r25	; 0x01
 336:	88 83       	st	Y, r24
 338:	0e c0       	rjmp	.+28     	; 0x356 <rtr_buff_update+0x13e>
		else
			cbuf_two_dif[two_bpos] = cbuf_two[two_bpos] - cbuf_two[jm1];
 33a:	cc 0f       	add	r28, r28
 33c:	dd 1f       	adc	r29, r29
 33e:	c2 52       	subi	r28, 0x22	; 34
 340:	de 4f       	sbci	r29, 0xFE	; 254
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	ef 2d       	mov	r30, r15
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ec 58       	subi	r30, 0x8C	; 140
 34a:	fd 4f       	sbci	r31, 0xFD	; 253
 34c:	20 81       	ld	r18, Z
 34e:	82 1b       	sub	r24, r18
 350:	91 09       	sbc	r25, r1
 352:	99 83       	std	Y+1, r25	; 0x01
 354:	88 83       	st	Y, r24

		if(two_bpos == 74)
 356:	1a 34       	cpi	r17, 0x4A	; 74
 358:	19 f4       	brne	.+6      	; 0x360 <rtr_buff_update+0x148>
			two_bpos = 0;
 35a:	10 92 dc 01 	sts	0x01DC, r1
 35e:	03 c0       	rjmp	.+6      	; 0x366 <rtr_buff_update+0x14e>
		else
			two_bpos++;
 360:	1f 5f       	subi	r17, 0xFF	; 255
 362:	10 93 dc 01 	sts	0x01DC, r17
		//uart_number(cbuf_two_dif[jm1]);
		//uart_str("\n");
	}

		
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	08 95       	ret

00000374 <rtr_intrpt>:
	
}

void rtr_intrpt()
{	
	if(!sel){
 374:	80 91 a0 03 	lds	r24, 0x03A0
 378:	81 11       	cpse	r24, r1
 37a:	07 c0       	rjmp	.+14     	; 0x38a <rtr_intrpt+0x16>
		static uint8_t buff_one = 0;		// Monitors if position has changed = easier to read information
		rtr_pos_one = rtr_qpos(sel);
 37c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <rtr_qpos>
 380:	80 93 a3 03 	sts	0x03A3, r24
			//uart_str("\nRotary ");
			//uart_number(sel);
			//uart_str(" Pos :");
			//uart_number(rtr_pos_one);
		}
		buff_one = rtr_pos_one;
 384:	80 93 db 01 	sts	0x01DB, r24
 388:	06 c0       	rjmp	.+12     	; 0x396 <rtr_intrpt+0x22>
	}else{
		static uint8_t buff_two = 0;
		rtr_pos_two = rtr_qpos(sel);
 38a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <rtr_qpos>
 38e:	80 93 a1 03 	sts	0x03A1, r24
			//uart_str("\nRotary ");
			//uart_number(sel);
			//uart_str(" Pos :");
			//uart_number(rtr_pos_two);
		}
		buff_two = rtr_pos_two;
 392:	80 93 da 01 	sts	0x01DA, r24
	}
	//uart_str("Checked encoder pos\n");
	rtr_buff_update();
 396:	0e 94 0c 01 	call	0x218	; 0x218 <rtr_buff_update>
		if(cbuf_one_dif[one_bpos] !=0){
 39a:	e0 91 dd 01 	lds	r30, 0x01DD
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	ee 0f       	add	r30, r30
 3a2:	ff 1f       	adc	r31, r31
 3a4:	e1 54       	subi	r30, 0x41	; 65
 3a6:	fd 4f       	sbci	r31, 0xFD	; 253
 3a8:	80 81       	ld	r24, Z
 3aa:	91 81       	ldd	r25, Z+1	; 0x01
 3ac:	00 97       	sbiw	r24, 0x00	; 0
 3ae:	31 f0       	breq	.+12     	; 0x3bc <rtr_intrpt+0x48>
			uart_number(cbuf_one_dif[one_bpos]);
 3b0:	0e 94 36 02 	call	0x46c	; 0x46c <uart_number>
			uart_str("\n");
 3b4:	88 e3       	ldi	r24, 0x38	; 56
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 27 02 	call	0x44e	; 0x44e <uart_str>
		}
	//rtr_speed_update();
	sel = !sel;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 91 a0 03 	lds	r25, 0x03A0
 3c2:	91 11       	cpse	r25, r1
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	80 93 a0 03 	sts	0x03A0, r24
 3ca:	08 95       	ret

000003cc <timer_init>:
//static uint8_t[8] rot_one = {0,0,0,0,0,0,0,0};
//static uint8_t[8] rot_two = {0,0,0,0,0,0,0,0};

void timer_init()
{
	OCR0A = F_CPU / 1024 / 50;   // Set up compare value for 50 Hz interrupt generation.
 3cc:	8a ee       	ldi	r24, 0xEA	; 234
 3ce:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1 << WGM01);               // Enable CTC mode
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = _BV(OCIE0A);                // Enable Timer0 Compare Match A interrupt
 3d4:	80 93 6e 00 	sts	0x006E, r24
	TCCR0B = (1 << CS02) | (0 << CS01) | (1 << CS00); // Initilise timer1 with /1024 prescaler	
 3d8:	85 e0       	ldi	r24, 0x05	; 5
 3da:	85 bd       	out	0x25, r24	; 37
 3dc:	08 95       	ret

000003de <__vector_16>:
}

ISR(TIMER0_COMPA_vect)
{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	6f 93       	push	r22
 3f2:	7f 93       	push	r23
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	af 93       	push	r26
 3fa:	bf 93       	push	r27
 3fc:	ef 93       	push	r30
 3fe:	ff 93       	push	r31
	//uart_str("Entered timer interrupt\n");
	rtr_intrpt();
 400:	0e 94 ba 01 	call	0x374	; 0x374 <rtr_intrpt>
	
	
	//rtr_position();
	//uart_data(rtr_position());
	//uart_data(rtr_value());
}
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <uart_init>:


void uart_init(void)
{
	/* Configure 9600 baud, 8-bit, no parity and one stop bit */
	UBRR0H = (F_CPU/(UART_BAUD*16L)-1) >> 8;
 426:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (F_CPU/(UART_BAUD*16L)-1);
 42a:	8d e4       	ldi	r24, 0x4D	; 77
 42c:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 430:	88 e1       	ldi	r24, 0x18	; 24
 432:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 436:	86 e0       	ldi	r24, 0x06	; 6
 438:	80 93 c2 00 	sts	0x00C2, r24
 43c:	08 95       	ret

0000043e <uart_tx>:


void uart_tx(char ch)
{

	while (!(UCSR0A & _BV(UDRE0)));
 43e:	e0 ec       	ldi	r30, 0xC0	; 192
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	90 81       	ld	r25, Z
 444:	95 ff       	sbrs	r25, 5
 446:	fd cf       	rjmp	.-6      	; 0x442 <uart_tx+0x4>
	UDR0 = ch;
 448:	80 93 c6 00 	sts	0x00C6, r24
 44c:	08 95       	ret

0000044e <uart_str>:
	UDR0 = d;

}

void uart_str(char *str)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	ec 01       	movw	r28, r24
	int i;
	for(i=0; str[i]; i++) uart_tx(str[i]);
 454:	88 81       	ld	r24, Y
 456:	88 23       	and	r24, r24
 458:	31 f0       	breq	.+12     	; 0x466 <uart_str+0x18>
 45a:	21 96       	adiw	r28, 0x01	; 1
 45c:	0e 94 1f 02 	call	0x43e	; 0x43e <uart_tx>
 460:	89 91       	ld	r24, Y+
 462:	81 11       	cpse	r24, r1
 464:	fb cf       	rjmp	.-10     	; 0x45c <uart_str+0xe>
}
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <uart_number>:

void uart_number(uint8_t x)			// Recursive function to print digits
{
 46c:	cf 93       	push	r28
 46e:	c8 2f       	mov	r28, r24
	if((x/10)!=0)
 470:	8a 30       	cpi	r24, 0x0A	; 10
 472:	48 f0       	brcs	.+18     	; 0x486 <uart_number+0x1a>
	uart_number(x/10);
 474:	8d ec       	ldi	r24, 0xCD	; 205
 476:	c8 9f       	mul	r28, r24
 478:	81 2d       	mov	r24, r1
 47a:	11 24       	eor	r1, r1
 47c:	86 95       	lsr	r24
 47e:	86 95       	lsr	r24
 480:	86 95       	lsr	r24
 482:	0e 94 36 02 	call	0x46c	; 0x46c <uart_number>
	
	char conv = '0' + (x%10);		//Converts uint to char for easy logging
 486:	8d ec       	ldi	r24, 0xCD	; 205
 488:	c8 9f       	mul	r28, r24
 48a:	81 2d       	mov	r24, r1
 48c:	11 24       	eor	r1, r1
 48e:	86 95       	lsr	r24
 490:	86 95       	lsr	r24
 492:	86 95       	lsr	r24
 494:	88 0f       	add	r24, r24
 496:	98 2f       	mov	r25, r24
 498:	99 0f       	add	r25, r25
 49a:	99 0f       	add	r25, r25
 49c:	89 0f       	add	r24, r25
 49e:	c8 1b       	sub	r28, r24
 4a0:	8c 2f       	mov	r24, r28
	uart_tx(conv);
 4a2:	80 5d       	subi	r24, 0xD0	; 208
 4a4:	0e 94 1f 02 	call	0x43e	; 0x43e <uart_tx>
	//uart_data(x%10);	
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
