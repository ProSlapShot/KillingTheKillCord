
Softpot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000006be  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800112  00800112  00000764  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066d  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000038b  00000000  00000000  00000f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000585  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c0  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e4  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006df  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000025cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#define F_CPU 12000000



void uart_init()
{
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
	// Configure UART0 baud rate
	UBRR0H = (F_CPU/(UART_BAUD*16L)-1) >> 8;
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
	UBRR0L = (F_CPU/(UART_BAUD*16L)-1);
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
	
	UCSR0B = _BV(RXEN0) | _BV(RXCIE0);		// Enable UART0 receiver and RX complete interrupt
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
	UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);		// one start bit, 8-bit, no parity and one stop
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
	
}
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_16>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee eb       	ldi	r30, 0xBE	; 190
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 31       	cpi	r26, 0x12	; 18
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e1       	ldi	r26, 0x12	; 18
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a1 32       	cpi	r26, 0x21	; 33
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 27 02 	call	0x44e	; 0x44e <main>
  b2:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <buttons_init>:
static uint8_t pins = _BV(0) | _BV(1) ;	//PB[0,1]
static uint8_t tmp = _BV(0) | _BV(1) ;
static uint8_t waiting = 0;

void buttons_init()
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	BTN_DDR |= ~pins; //Set Port B as inputs
  c2:	84 e2       	ldi	r24, 0x24	; 36
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	24 e2       	ldi	r18, 0x24	; 36
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	20 81       	ld	r18, Z
  ce:	32 2f       	mov	r19, r18
  d0:	20 91 08 01 	lds	r18, 0x0108
  d4:	20 95       	com	r18
  d6:	23 2b       	or	r18, r19
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	BTN_PORT |= pins; // Enable pull up resistors
  dc:	85 e2       	ldi	r24, 0x25	; 37
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	25 e2       	ldi	r18, 0x25	; 37
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f9 01       	movw	r30, r18
  e6:	30 81       	ld	r19, Z
  e8:	20 91 08 01 	lds	r18, 0x0108
  ec:	23 2b       	or	r18, r19
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
	PCICR = _BV(PCIE1); //Enable interrupts on Port B
  f2:	88 e6       	ldi	r24, 0x68	; 104
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	22 e0       	ldi	r18, 0x02	; 2
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
	PCMSK1 |= pins; //Set pins on Port B as interrupts
  fc:	8c e6       	ldi	r24, 0x6C	; 108
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	2c e6       	ldi	r18, 0x6C	; 108
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	f9 01       	movw	r30, r18
 106:	30 81       	ld	r19, Z
 108:	20 91 08 01 	lds	r18, 0x0108
 10c:	23 2b       	or	r18, r19
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
	
	
	tmp = (BTN_PIN & pins);		// Initial button status
 112:	83 e2       	ldi	r24, 0x23	; 35
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	90 81       	ld	r25, Z
 11a:	80 91 08 01 	lds	r24, 0x0108
 11e:	89 23       	and	r24, r25
 120:	80 93 09 01 	sts	0x0109, r24
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <__vector_5>:


ISR(PCINT1_vect) 
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	00 90 5f 00 	lds	r0, 0x005F
 132:	0f 92       	push	r0
 134:	11 24       	eor	r1, r1
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
	waiting |= (PINB & pins) ^ tmp;		//Need to mask pins
 146:	83 e2       	ldi	r24, 0x23	; 35
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	90 81       	ld	r25, Z
 14e:	80 91 08 01 	lds	r24, 0x0108
 152:	98 23       	and	r25, r24
 154:	80 91 09 01 	lds	r24, 0x0109
 158:	98 27       	eor	r25, r24
 15a:	80 91 12 01 	lds	r24, 0x0112
 15e:	89 2b       	or	r24, r25
 160:	80 93 12 01 	sts	0x0112, r24
	tmp = (BTN_PIN & pins);
 164:	83 e2       	ldi	r24, 0x23	; 35
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	90 81       	ld	r25, Z
 16c:	80 91 08 01 	lds	r24, 0x0108
 170:	89 23       	and	r24, r25
 172:	80 93 09 01 	sts	0x0109, r24
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	00 92 5f 00 	sts	0x005F, r0
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <check_button_status>:

void check_button_status()
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	00 d0       	rcall	.+0      	; 0x194 <check_button_status+0x6>
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
	
	if (waiting)
 198:	80 91 12 01 	lds	r24, 0x0112
 19c:	88 23       	and	r24, r24
 19e:	09 f4       	brne	.+2      	; 0x1a2 <check_button_status+0x14>
 1a0:	4c c0       	rjmp	.+152    	; 0x23a <check_button_status+0xac>
	{
		uint8_t j = 0;
 1a2:	19 82       	std	Y+1, r1	; 0x01
		
		
		do
		{
			uint8_t mask = (1 << j);
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 2e       	mov	r0, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <check_button_status+0x28>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <check_button_status+0x24>
 1ba:	8a 83       	std	Y+2, r24	; 0x02
			if (waiting & mask)				// Detects button press
 1bc:	90 91 12 01 	lds	r25, 0x0112
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	89 23       	and	r24, r25
 1c4:	88 23       	and	r24, r24
 1c6:	91 f1       	breq	.+100    	; 0x22c <check_button_status+0x9e>
			{
				waiting &= ~mask;
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	98 2f       	mov	r25, r24
 1cc:	90 95       	com	r25
 1ce:	80 91 12 01 	lds	r24, 0x0112
 1d2:	89 23       	and	r24, r25
 1d4:	80 93 12 01 	sts	0x0112, r24
				if(mappings[j] != 0)
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	88 2f       	mov	r24, r24
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	80 50       	subi	r24, 0x00	; 0
 1e0:	9f 4f       	sbci	r25, 0xFF	; 255
 1e2:	fc 01       	movw	r30, r24
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	09 f1       	breq	.+66     	; 0x22c <check_button_status+0x9e>
				{
					if ((BTN_PIN & pins) & mask)
 1ea:	83 e2       	ldi	r24, 0x23	; 35
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	fc 01       	movw	r30, r24
 1f0:	90 81       	ld	r25, Z
 1f2:	80 91 08 01 	lds	r24, 0x0108
 1f6:	98 23       	and	r25, r24
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	89 23       	and	r24, r25
 1fc:	88 23       	and	r24, r24
 1fe:	b1 f4       	brne	.+44     	; 0x22c <check_button_status+0x9e>
					{
						/* Button depress action */
					}
					else
					{
						if(mappings[j] == 1)
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	88 2f       	mov	r24, r24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	80 50       	subi	r24, 0x00	; 0
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	11 f4       	brne	.+4      	; 0x216 <check_button_status+0x88>
							engine_start();		
 212:	0e 94 3a 03 	call	0x674	; 0x674 <engine_start>
						if(mappings[j] == 2)
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	88 2f       	mov	r24, r24
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	80 50       	subi	r24, 0x00	; 0
 21e:	9f 4f       	sbci	r25, 0xFF	; 255
 220:	fc 01       	movw	r30, r24
 222:	80 81       	ld	r24, Z
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	11 f4       	brne	.+4      	; 0x22c <check_button_status+0x9e>
							calibrate();
 228:	0e 94 1c 02 	call	0x438	; 0x438 <calibrate>
							//engine_start();
					}
				}
			}
		} while(j++ != 7);
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	98 0f       	add	r25, r24
 232:	99 83       	std	Y+1, r25	; 0x01
 234:	87 30       	cpi	r24, 0x07	; 7
 236:	09 f0       	breq	.+2      	; 0x23a <check_button_status+0xac>
 238:	b5 cf       	rjmp	.-150    	; 0x1a4 <check_button_status+0x16>
	}
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <adc_init>:

int cal = 0;


void adc_init()
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = _BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1);	//Enable ADC with prescaler of 64 & interrupt
 24c:	8a e7       	ldi	r24, 0x7A	; 122
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	2e e8       	ldi	r18, 0x8E	; 142
 252:	fc 01       	movw	r30, r24
 254:	20 83       	st	Z, r18
	ADMUX = wheel;												//AVCC, initializes on ADC0
 256:	8c e7       	ldi	r24, 0x7C	; 124
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	20 91 0a 01 	lds	r18, 0x010A
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <adc_conv>:

void adc_conv()
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= _BV(ADSC);
 270:	8a e7       	ldi	r24, 0x7A	; 122
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	2a e7       	ldi	r18, 0x7A	; 122
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	f9 01       	movw	r30, r18
 27a:	20 81       	ld	r18, Z
 27c:	20 64       	ori	r18, 0x40	; 64
 27e:	fc 01       	movw	r30, r24
 280:	20 83       	st	Z, r18
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <__vector_24>:
	throttle_cal = adc_value();
	ADMUX = wheel;
}

ISR(ADC_vect)
{
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	00 90 5f 00 	lds	r0, 0x005F
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	4f 93       	push	r20
 29a:	5f 93       	push	r21
 29c:	6f 93       	push	r22
 29e:	7f 93       	push	r23
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <__vector_24+0x2a>
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
	
	
		uint16_t result = ADCL | (ADCH <<8);		// Take ADC result
 2b6:	88 e7       	ldi	r24, 0x78	; 120
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	fc 01       	movw	r30, r24
 2bc:	80 81       	ld	r24, Z
 2be:	28 2f       	mov	r18, r24
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	89 e7       	ldi	r24, 0x79	; 121
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fc 01       	movw	r30, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	88 2f       	mov	r24, r24
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	98 2f       	mov	r25, r24
 2d0:	88 27       	eor	r24, r24
 2d2:	82 2b       	or	r24, r18
 2d4:	93 2b       	or	r25, r19
 2d6:	9a 83       	std	Y+2, r25	; 0x02
 2d8:	89 83       	std	Y+1, r24	; 0x01
	
		if(ADMUX == wheel)
 2da:	8c e7       	ldi	r24, 0x7C	; 124
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	90 81       	ld	r25, Z
 2e2:	80 91 0a 01 	lds	r24, 0x010A
 2e6:	98 17       	cp	r25, r24
 2e8:	09 f0       	breq	.+2      	; 0x2ec <__vector_24+0x64>
 2ea:	3f c0       	rjmp	.+126    	; 0x36a <__vector_24+0xe2>
		{
			if(cal == 0 | cal == 1)
 2ec:	80 91 13 01 	lds	r24, 0x0113
 2f0:	90 91 14 01 	lds	r25, 0x0114
 2f4:	31 e0       	ldi	r19, 0x01	; 1
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	09 f0       	breq	.+2      	; 0x2fc <__vector_24+0x74>
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	80 91 13 01 	lds	r24, 0x0113
 300:	90 91 14 01 	lds	r25, 0x0114
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	91 05       	cpc	r25, r1
 30a:	09 f0       	breq	.+2      	; 0x30e <__vector_24+0x86>
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	83 2f       	mov	r24, r19
 310:	82 2b       	or	r24, r18
 312:	88 23       	and	r24, r24
 314:	81 f0       	breq	.+32     	; 0x336 <__vector_24+0xae>
			{
				wheel_cal = result;
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	9a 81       	ldd	r25, Y+2	; 0x02
 31a:	90 93 0d 01 	sts	0x010D, r25
 31e:	80 93 0c 01 	sts	0x010C, r24
				cal ++;
 322:	80 91 13 01 	lds	r24, 0x0113
 326:	90 91 14 01 	lds	r25, 0x0114
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	90 93 14 01 	sts	0x0114, r25
 330:	80 93 13 01 	sts	0x0113, r24
 334:	11 c0       	rjmp	.+34     	; 0x358 <__vector_24+0xd0>
			}
			else
			{
				if(result > (wheel_cal + 25))		//25 is ballpark value, don't want false detection from noise
 336:	80 91 0c 01 	lds	r24, 0x010C
 33a:	90 91 0d 01 	lds	r25, 0x010D
 33e:	9c 01       	movw	r18, r24
 340:	27 5e       	subi	r18, 0xE7	; 231
 342:	3f 4f       	sbci	r19, 0xFF	; 255
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	9a 81       	ldd	r25, Y+2	; 0x02
 348:	28 17       	cp	r18, r24
 34a:	39 07       	cpc	r19, r25
 34c:	18 f4       	brcc	.+6      	; 0x354 <__vector_24+0xcc>
					reset_wheel_flag();
 34e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <reset_wheel_flag>
 352:	02 c0       	rjmp	.+4      	; 0x358 <__vector_24+0xd0>
				else
					set_wheel_flag();
 354:	0e 94 79 02 	call	0x4f2	; 0x4f2 <set_wheel_flag>
			}
			ADMUX = throttle;
 358:	8c e7       	ldi	r24, 0x7C	; 124
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	20 91 0b 01 	lds	r18, 0x010B
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
			adc_conv();
 364:	0e 94 34 01 	call	0x268	; 0x268 <adc_conv>
 368:	51 c0       	rjmp	.+162    	; 0x40c <__vector_24+0x184>
		}
		
		else if(ADMUX == throttle)
 36a:	8c e7       	ldi	r24, 0x7C	; 124
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	fc 01       	movw	r30, r24
 370:	90 81       	ld	r25, Z
 372:	80 91 0b 01 	lds	r24, 0x010B
 376:	98 17       	cp	r25, r24
 378:	09 f0       	breq	.+2      	; 0x37c <__vector_24+0xf4>
 37a:	3f c0       	rjmp	.+126    	; 0x3fa <__vector_24+0x172>
		{
			if(!(cal == 0 | cal == 1))
 37c:	80 91 13 01 	lds	r24, 0x0113
 380:	90 91 14 01 	lds	r25, 0x0114
 384:	31 e0       	ldi	r19, 0x01	; 1
 386:	00 97       	sbiw	r24, 0x00	; 0
 388:	09 f4       	brne	.+2      	; 0x38c <__vector_24+0x104>
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	80 91 13 01 	lds	r24, 0x0113
 390:	90 91 14 01 	lds	r25, 0x0114
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	91 05       	cpc	r25, r1
 39a:	09 f4       	brne	.+2      	; 0x39e <__vector_24+0x116>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	83 2f       	mov	r24, r19
 3a0:	82 23       	and	r24, r18
 3a2:	88 23       	and	r24, r24
 3a4:	91 f0       	breq	.+36     	; 0x3ca <__vector_24+0x142>
			{
				if(result > (throttle_cal + 25))
 3a6:	80 91 0e 01 	lds	r24, 0x010E
 3aa:	90 91 0f 01 	lds	r25, 0x010F
 3ae:	9c 01       	movw	r18, r24
 3b0:	27 5e       	subi	r18, 0xE7	; 231
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	9a 81       	ldd	r25, Y+2	; 0x02
 3b8:	28 17       	cp	r18, r24
 3ba:	39 07       	cpc	r19, r25
 3bc:	18 f4       	brcc	.+6      	; 0x3c4 <__vector_24+0x13c>
					reset_throttle_flag();
 3be:	0e 94 86 02 	call	0x50c	; 0x50c <reset_throttle_flag>
 3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <__vector_24+0x160>
				else
					set_throttle_flag();	
 3c4:	0e 94 91 02 	call	0x522	; 0x522 <set_throttle_flag>
 3c8:	0f c0       	rjmp	.+30     	; 0x3e8 <__vector_24+0x160>

			}
			else 
			{
				throttle_cal = result;
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	9a 81       	ldd	r25, Y+2	; 0x02
 3ce:	90 93 0f 01 	sts	0x010F, r25
 3d2:	80 93 0e 01 	sts	0x010E, r24
					cal ++;
 3d6:	80 91 13 01 	lds	r24, 0x0113
 3da:	90 91 14 01 	lds	r25, 0x0114
 3de:	01 96       	adiw	r24, 0x01	; 1
 3e0:	90 93 14 01 	sts	0x0114, r25
 3e4:	80 93 13 01 	sts	0x0113, r24
			}
			ADMUX = wheel;	
 3e8:	8c e7       	ldi	r24, 0x7C	; 124
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	20 91 0a 01 	lds	r18, 0x010A
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
			adc_conv();
 3f4:	0e 94 34 01 	call	0x268	; 0x268 <adc_conv>
 3f8:	09 c0       	rjmp	.+18     	; 0x40c <__vector_24+0x184>
		}
		else
			PINB |= _BV(PB7);
 3fa:	83 e2       	ldi	r24, 0x23	; 35
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	23 e2       	ldi	r18, 0x23	; 35
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	f9 01       	movw	r30, r18
 404:	20 81       	ld	r18, Z
 406:	20 68       	ori	r18, 0x80	; 128
 408:	fc 01       	movw	r30, r24
 40a:	20 83       	st	Z, r18

}
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	bf 91       	pop	r27
 41a:	af 91       	pop	r26
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	7f 91       	pop	r23
 422:	6f 91       	pop	r22
 424:	5f 91       	pop	r21
 426:	4f 91       	pop	r20
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	0f 90       	pop	r0
 42e:	00 92 5f 00 	sts	0x005F, r0
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <calibrate>:

void calibrate()
{
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
	cal = 0;
 440:	10 92 14 01 	sts	0x0114, r1
 444:	10 92 13 01 	sts	0x0113, r1
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <main>:
#include "sseg.h"



int main(void)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
	
	DDRB |= _BV(PB7);	//LED lights up when engine is off
 456:	84 e2       	ldi	r24, 0x24	; 36
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	24 e2       	ldi	r18, 0x24	; 36
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	f9 01       	movw	r30, r18
 460:	20 81       	ld	r18, Z
 462:	20 68       	ori	r18, 0x80	; 128
 464:	fc 01       	movw	r30, r24
 466:	20 83       	st	Z, r18
	
	sseg_init();
 468:	0e 94 40 02 	call	0x480	; 0x480 <sseg_init>
	adc_init();
 46c:	0e 94 22 01 	call	0x244	; 0x244 <adc_init>
	buttons_init();
 470:	0e 94 5d 00 	call	0xba	; 0xba <buttons_init>
	timer_init();
 474:	0e 94 53 02 	call	0x4a6	; 0x4a6 <timer_init>
	sei();
 478:	78 94       	sei
	
	adc_conv();		// starts continuous conversions between ADC
 47a:	0e 94 34 01 	call	0x268	; 0x268 <adc_conv>
	//sseg_disp(8);
	
    while(1)
    {
	
    }
 47e:	ff cf       	rjmp	.-2      	; 0x47e <main+0x30>

00000480 <sseg_init>:

static uint8_t sseg_pins = _BV(PD0) |_BV(PD1) |_BV(PD2) |_BV(PD3) |_BV(PD4) |_BV(PD5) |_BV(PD6);


void sseg_init()
{
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
	SSEG_DDR = sseg_pins;
 488:	8a e2       	ldi	r24, 0x2A	; 42
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	20 91 10 01 	lds	r18, 0x0110
 490:	fc 01       	movw	r30, r24
 492:	20 83       	st	Z, r18
	SSEG_PORT = sseg_pins;
 494:	8b e2       	ldi	r24, 0x2B	; 43
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	20 91 10 01 	lds	r18, 0x0110
 49c:	fc 01       	movw	r30, r24
 49e:	20 83       	st	Z, r18
}
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <timer_init>:
int throttle_flag = 0;
int wheel_flag = 0;
int led_flash = 0;

void timer_init()
{
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
	OCR0A = F_CPU / 1024 / 50;   // Set up compare value for 50 Hz interrupt generation.
 4ae:	87 e4       	ldi	r24, 0x47	; 71
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	2a ee       	ldi	r18, 0xEA	; 234
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
	TCCR0A = (1 << WGM01);               // Enable CTC mode
 4b8:	84 e4       	ldi	r24, 0x44	; 68
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	22 e0       	ldi	r18, 0x02	; 2
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
	TIMSK0 = _BV(OCIE0A);                // Enable Timer0 Compare Match A interrupt
 4c2:	8e e6       	ldi	r24, 0x6E	; 110
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	22 e0       	ldi	r18, 0x02	; 2
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
	TCCR0B = (1 << CS02) | (0 << CS01) | (1 << CS00); // Initilise timer1 with /1024 prescaler	
 4cc:	85 e4       	ldi	r24, 0x45	; 69
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	25 e0       	ldi	r18, 0x05	; 5
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
}
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <reset_wheel_flag>:

void reset_wheel_flag()
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	cd b7       	in	r28, 0x3d	; 61
 4e2:	de b7       	in	r29, 0x3e	; 62
	wheel_flag = 0;
 4e4:	10 92 1e 01 	sts	0x011E, r1
 4e8:	10 92 1d 01 	sts	0x011D, r1
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <set_wheel_flag>:

void set_wheel_flag()
{
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	cd b7       	in	r28, 0x3d	; 61
 4f8:	de b7       	in	r29, 0x3e	; 62
	wheel_flag = 1;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	90 93 1e 01 	sts	0x011E, r25
 502:	80 93 1d 01 	sts	0x011D, r24
}
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	08 95       	ret

0000050c <reset_throttle_flag>:

void reset_throttle_flag()
{
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	cd b7       	in	r28, 0x3d	; 61
 512:	de b7       	in	r29, 0x3e	; 62
	throttle_flag = 0;
 514:	10 92 1c 01 	sts	0x011C, r1
 518:	10 92 1b 01 	sts	0x011B, r1
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <set_throttle_flag>:

void set_throttle_flag()
{
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
	throttle_flag = 1;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	90 93 1c 01 	sts	0x011C, r25
 532:	80 93 1b 01 	sts	0x011B, r24
}
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <__vector_16>:

ISR(TIMER0_COMPA_vect)
{
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	00 90 5f 00 	lds	r0, 0x005F
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	2f 93       	push	r18
 54a:	3f 93       	push	r19
 54c:	4f 93       	push	r20
 54e:	5f 93       	push	r21
 550:	6f 93       	push	r22
 552:	7f 93       	push	r23
 554:	8f 93       	push	r24
 556:	9f 93       	push	r25
 558:	af 93       	push	r26
 55a:	bf 93       	push	r27
 55c:	ef 93       	push	r30
 55e:	ff 93       	push	r31
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
	/* Check length of time controls are left untouched */
	
	if(throttle_flag | wheel_flag)
 568:	20 91 1b 01 	lds	r18, 0x011B
 56c:	30 91 1c 01 	lds	r19, 0x011C
 570:	80 91 1d 01 	lds	r24, 0x011D
 574:	90 91 1e 01 	lds	r25, 0x011E
 578:	82 2b       	or	r24, r18
 57a:	93 2b       	or	r25, r19
 57c:	00 97       	sbiw	r24, 0x00	; 0
 57e:	d1 f0       	breq	.+52     	; 0x5b4 <__vector_16+0x78>
	{
		count ++;
 580:	80 91 15 01 	lds	r24, 0x0115
 584:	90 91 16 01 	lds	r25, 0x0116
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	90 93 16 01 	sts	0x0116, r25
 58e:	80 93 15 01 	sts	0x0115, r24
		if(count == 250)		// can be changed depending on delay 
 592:	80 91 15 01 	lds	r24, 0x0115
 596:	90 91 16 01 	lds	r25, 0x0116
 59a:	8a 3f       	cpi	r24, 0xFA	; 250
 59c:	91 05       	cpc	r25, r1
 59e:	71 f4       	brne	.+28     	; 0x5bc <__vector_16+0x80>
			PORTB |= _BV(PB7);
 5a0:	85 e2       	ldi	r24, 0x25	; 37
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	25 e2       	ldi	r18, 0x25	; 37
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	f9 01       	movw	r30, r18
 5aa:	20 81       	ld	r18, Z
 5ac:	20 68       	ori	r18, 0x80	; 128
 5ae:	fc 01       	movw	r30, r24
 5b0:	20 83       	st	Z, r18
 5b2:	04 c0       	rjmp	.+8      	; 0x5bc <__vector_16+0x80>
	}
	else
	count = 0;
 5b4:	10 92 16 01 	sts	0x0116, r1
 5b8:	10 92 15 01 	sts	0x0115, r1
	
	/* Debouncing for input buttons */
	check_button_status();
 5bc:	0e 94 c7 00 	call	0x18e	; 0x18e <check_button_status>
	
	/*Flash LED on unsuccessful start up*/
	if(led_flash)
 5c0:	80 91 1f 01 	lds	r24, 0x011F
 5c4:	90 91 20 01 	lds	r25, 0x0120
 5c8:	00 97       	sbiw	r24, 0x00	; 0
 5ca:	09 f4       	brne	.+2      	; 0x5ce <__vector_16+0x92>
 5cc:	3f c0       	rjmp	.+126    	; 0x64c <__vector_16+0x110>
	{
		if(i<=25)
 5ce:	80 91 17 01 	lds	r24, 0x0117
 5d2:	90 91 18 01 	lds	r25, 0x0118
 5d6:	8a 31       	cpi	r24, 0x1A	; 26
 5d8:	91 05       	cpc	r25, r1
 5da:	54 f4       	brge	.+20     	; 0x5f0 <__vector_16+0xb4>
		{
			i++;
 5dc:	80 91 17 01 	lds	r24, 0x0117
 5e0:	90 91 18 01 	lds	r25, 0x0118
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	90 93 18 01 	sts	0x0118, r25
 5ea:	80 93 17 01 	sts	0x0117, r24
 5ee:	16 c0       	rjmp	.+44     	; 0x61c <__vector_16+0xe0>
		}
		else
		{
			PINB |= _BV(PB7);
 5f0:	83 e2       	ldi	r24, 0x23	; 35
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	23 e2       	ldi	r18, 0x23	; 35
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	f9 01       	movw	r30, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	20 68       	ori	r18, 0x80	; 128
 5fe:	fc 01       	movw	r30, r24
 600:	20 83       	st	Z, r18
			i = 0;
 602:	10 92 18 01 	sts	0x0118, r1
 606:	10 92 17 01 	sts	0x0117, r1
			flash_count++;			
 60a:	80 91 19 01 	lds	r24, 0x0119
 60e:	90 91 1a 01 	lds	r25, 0x011A
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	90 93 1a 01 	sts	0x011A, r25
 618:	80 93 19 01 	sts	0x0119, r24
		}
		if (flash_count >= 6)
 61c:	80 91 19 01 	lds	r24, 0x0119
 620:	90 91 1a 01 	lds	r25, 0x011A
 624:	86 30       	cpi	r24, 0x06	; 6
 626:	91 05       	cpc	r25, r1
 628:	8c f0       	brlt	.+34     	; 0x64c <__vector_16+0x110>
		{
			led_flash = 0;
 62a:	10 92 20 01 	sts	0x0120, r1
 62e:	10 92 1f 01 	sts	0x011F, r1
			flash_count = 0;
 632:	10 92 1a 01 	sts	0x011A, r1
 636:	10 92 19 01 	sts	0x0119, r1
			PORTB |= _BV(PB7);
 63a:	85 e2       	ldi	r24, 0x25	; 37
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	25 e2       	ldi	r18, 0x25	; 37
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	f9 01       	movw	r30, r18
 644:	20 81       	ld	r18, Z
 646:	20 68       	ori	r18, 0x80	; 128
 648:	fc 01       	movw	r30, r24
 64a:	20 83       	st	Z, r18
		sseg_tester++;
	}
	if(sseg_tester >= 9)
		sseg_tester = 0; 
	*/
}
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	7f 91       	pop	r23
 65e:	6f 91       	pop	r22
 660:	5f 91       	pop	r21
 662:	4f 91       	pop	r20
 664:	3f 91       	pop	r19
 666:	2f 91       	pop	r18
 668:	0f 90       	pop	r0
 66a:	00 92 5f 00 	sts	0x005F, r0
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <engine_start>:

void engine_start()
{
 674:	cf 93       	push	r28
 676:	df 93       	push	r29
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
	if(!(throttle_flag|wheel_flag))
 67c:	20 91 1b 01 	lds	r18, 0x011B
 680:	30 91 1c 01 	lds	r19, 0x011C
 684:	80 91 1d 01 	lds	r24, 0x011D
 688:	90 91 1e 01 	lds	r25, 0x011E
 68c:	82 2b       	or	r24, r18
 68e:	93 2b       	or	r25, r19
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	51 f4       	brne	.+20     	; 0x6a8 <engine_start+0x34>
		{
			PORTB &= ~_BV(PB7);			//LED shows status of engine
 694:	85 e2       	ldi	r24, 0x25	; 37
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	25 e2       	ldi	r18, 0x25	; 37
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	f9 01       	movw	r30, r18
 69e:	20 81       	ld	r18, Z
 6a0:	2f 77       	andi	r18, 0x7F	; 127
 6a2:	fc 01       	movw	r30, r24
 6a4:	20 83       	st	Z, r18
 6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <engine_start+0x40>
		}
	else
		led_flash = 1;
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	90 93 20 01 	sts	0x0120, r25
 6b0:	80 93 1f 01 	sts	0x011F, r24
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	08 95       	ret

000006ba <_exit>:
 6ba:	f8 94       	cli

000006bc <__stop_program>:
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <__stop_program>
